[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DP4SS",
    "section": "",
    "text": "1 Introduction",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "ch-000-introduction-to-r.html",
    "href": "ch-000-introduction-to-r.html",
    "title": "2  Introduction to R",
    "section": "",
    "text": "2.1 Navigation\nYou need to know a few operations to help you maneuver the R work environment, such as listing objects (datasets and functions) that are active, changing your working directory, listing available files, and finding help.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "ch-000-introduction-to-r.html#navigation",
    "href": "ch-000-introduction-to-r.html#navigation",
    "title": "2  Introduction to R",
    "section": "",
    "text": "2.1.1 Setting Your Working Directory\nWhen you are ready to load data, R needs to know where to look for your files. You can check what is avaiable in the current directory (i.e. folder) by asking to list all of the current files using dir().\n\ndir()\n\nIf the file that you need is located in a different folder, you can change directories easily in R Studio by Session -&gt; Set working director -&gt; Choose directory (or Ctrl + Shift + H).\nIf you are writing a script, you want to keep track of this step so that it can be reproduced. Use the function get.wd() to check your current working directory, and set.wd() to change. You need to specify your path as an argument to this function, such as.\n\nsetwd( \"C:/user/projects/financial model\" )\n\nNOTE! R uses unix style notation with forward slashes, so if you copy and paste from Windows it will look like this, with back slashes:\n\nsetwd( \"C:\\user\\projects\\financial model\" )\n\nYou will need to change them around for it to work.\nIt is best to save all of your steps in your scripts so that the analysis can be reproduced by yourself or others. In some cases you are doing exploratory or summary work, and you may want to find a file a quickly. You can use the file.choose() function to open a GUI to select your file directly. This function is used as an argument inside of a load data function.\n\nmy.dat &lt;- read.csv( file.choose() )",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "ch-000-introduction-to-r.html#commenting-code",
    "href": "ch-000-introduction-to-r.html#commenting-code",
    "title": "2  Introduction to R",
    "section": "2.2 Commenting Code",
    "text": "2.2 Commenting Code\nMost computer languages have a special character that is used to “comment out” lines so that it is not run by the program. It is used for two important purposes. First, we can add text to document our functions and it will not interfere with the program. And two, we can use it to run a program while ignoring some of the code, often for debugging purposes.\nThe # hash tag is used for comments in R.\n\n##==============================================\n##\n##  Here is some documentation for this script\n##\n##==============================================\n\nx &lt;- 1:10\n\nsum( x )\n\n[1] 55\n\n# y &lt;- 1:25     # not run\n\n# sum( y )      # not run",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "ch-000-introduction-to-r.html#help",
    "href": "ch-000-introduction-to-r.html#help",
    "title": "2  Introduction to R",
    "section": "2.3 Help",
    "text": "2.3 Help\nYou will use the help functions frequently to figure out what arguments and values are needed for specific functions. Because R is very customizable, you will find that many functions have several or dozens of arguments, and it is difficult to remember the correct syntax and values. But don’t worry, to look them up all you need is the function name and a call for help:\n\nhelp( dotchart ) # opens an external helpfile\n\nIf you just need to remind yourself which arguments are defined in a function, you can use the args() command:\n\nargs( dotchart )\n\nfunction (x, labels = NULL, groups = NULL, gdata = NULL, offset = 1/8, \n    ann = par(\"ann\"), xaxt = par(\"xaxt\"), frame.plot = TRUE, \n    log = \"\", cex = par(\"cex\"), pt.cex = cex, pch = 21, gpch = 21, \n    bg = par(\"bg\"), color = par(\"fg\"), gcolor = par(\"fg\"), lcolor = \"gray\", \n    xlim = range(x[is.finite(x)]), main = NULL, xlab = NULL, \n    ylab = NULL, ...) \nNULL\n\n\nIf you can’t recall a function name, you can list all of the functions from a specific package as follows:\n\nhelp( package=“stats” ) # lists all functions in stats package",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "ch-000-introduction-to-r.html#install-programs-packages",
    "href": "ch-000-introduction-to-r.html#install-programs-packages",
    "title": "2  Introduction to R",
    "section": "2.4 Install Programs (packages)",
    "text": "2.4 Install Programs (packages)\nWhen you open R by default it will launch a core set of programs, called “packages” in R speak, that are use for most data operations. To see which packages are currently active use the search() function.\n\nsearch()\n\n[1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\" \n[4] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n[7] \"package:methods\"   \"Autoloads\"         \"package:base\"     \n\n\nThese programs manage the basic data operations, run the core graphics engine, and give you basic statistical methods.\nThe real magic for R comes from the over 7,000 contributed packages available on the CRAN: https://cran.r-project.org/web/views/\nA package consists of custom functions and datasets that are generated by users. They are packaged together so that they can be shared with others. A package also includes documentation that describes each function, defines all of the arguments, and documents any datasets that are included.\nIf you know a package name, it is easy to install. In R Studio you can select Tools -&gt; Install Packages and a list of available packages will be generated. But it is easier to use the install.packages() command. We will use the Lahman Package in this course, so let’s install that now.\nDescription This package provides the tables from Sean Lahman’s Baseball Database as a set of R data.frames. It uses the data on pitching, hitting and fielding performance and other tables from 1871 through 2013, as recorded in the 2014 version of the database.\nSee the documentation here: https://cran.r-project.org/web/packages/Lahman/Lahman.pdf\n\ninstall.packages( \"Lahman\" )\n\nYou will be asked to select a “mirror”. In R speak this just means the server from which you will download the package (choose anything nearby). R is a community of developers and universities that create code and maintain the infrastructure. A couple of dozen universities around the world host servers that contain copies of the R packages so that they can be easily accessed everywhere.\nIf the package is successfully installed you will get a message similar to this:\n\npackage ‘Lahman’ successfully unpacked and MD5 sums checked\n\nOnce a new program is installed you can now open (“load” in R speak) the package using the library() command:\n\nlibrary( \"Lahman\" )\n\nIf you now type search() you can see that Lahman has been added to the list of active programs. We can now access all of the functions and data that are available in the Lahman package.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "ch-000-introduction-to-r.html#accessing-built-in-datasets-in-r",
    "href": "ch-000-introduction-to-r.html#accessing-built-in-datasets-in-r",
    "title": "2  Introduction to R",
    "section": "2.5 Accessing Built-In Datasets in R",
    "text": "2.5 Accessing Built-In Datasets in R\nOne nice feature of R is that is comes with a bunch of built-in datasets that have been contributed by users are are loaded automatically. You can see the list of available datasets by typing:\n\ndata()\n\nThis will list all of the default datasets in core R packages. If you want to see all of the datasets available in installed packages as well use:\n\ndata( package = .packages(all.available = TRUE) )\n\n\n2.5.1 Basic Data Operations\nLet’s ignore the underlying data structure right now and look at some ways that we might interact with data.\nWe will use the USArrests dataset available in the core files.\nTo access the data we need to load it into working memory. Anything that is active in R will be listed in the environment, which you can check using the ls() command. We will load the dataset using the data() command.\n\nremove( list=ls() )\n\n\nls() # nothing currently available\n\ncharacter(0)\n\ndata( \"USArrests\" )\nls() # data is now available for use\n\n[1] \"USArrests\"\n\n\nNow that we have loaded a dataset, we can start to access the variables and analyze relationships. Let’s get to know our dataset.\n\nnames( USArrests )  # which variables are in the dataset?\n\n[1] \"Murder\"   \"Assault\"  \"UrbanPop\" \"Rape\"    \n\nnrow( USArrests )   # how many observations are there?\n\n[1] 50\n\ndim( USArrests )    # a quick way to see rows and columns\n\n[1] 50  4\n\n# observation labels (row names) in our data:\nrow.names( USArrests ) |&gt; head() \n\n[1] \"Alabama\"    \"Alaska\"     \"Arizona\"    \"Arkansas\"   \"California\"\n[6] \"Colorado\"  \n\n# summary statistics for each variable\nsummary( USArrests )  |&gt; pander::pander()\n\n\n\n\n\n\n\n\n\n\nMurder\nAssault\nUrbanPop\nRape\n\n\n\n\nMin. : 0.800\nMin. : 45.0\nMin. :32.00\nMin. : 7.30\n\n\n1st Qu.: 4.075\n1st Qu.:109.0\n1st Qu.:54.50\n1st Qu.:15.07\n\n\nMedian : 7.250\nMedian :159.0\nMedian :66.00\nMedian :20.10\n\n\nMean : 7.788\nMean :170.8\nMean :65.54\nMean :21.23\n\n\n3rd Qu.:11.250\n3rd Qu.:249.0\n3rd Qu.:77.75\n3rd Qu.:26.18\n\n\nMax. :17.400\nMax. :337.0\nMax. :91.00\nMax. :46.00\n\n\n\n\n\nWe can see that the dataset consists of four variables: Murder, Assault, UrbanPop, and Rape. We also see that our unit of analysis is the state. But where does the data come from, and how are these variables measured?\nTo see the documentation for a specific dataset you will need to use the help() function:\n\nhelp( \"USArrests\" )\n\nWe get valuable information about the source and metrics:\nDescription This data set contains statistics, in arrests per 100,000 residents for assault, murder, and rape in each of the 50 US states in 1973. Also given is the percent of the population living in urban areas.\nFormat A data frame with 50 observations on 4 variables.\n\nMurder: numeric Murder arrests (per 100,000)\nAssault: numeric Assault arrests (per 100,000)\nUrbanPop: numeric Percent urban population\nRape: numeric Rape arrests (per 100,000)\n\nTo access a specific variable inside of a dataset, you will use the $ operator between the dataset name and the variable name:\n\nsummary( USArrests$Murder ) \nsummary( USArrests$Assault ) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMin.\n1st Qu.\nMedian\nMean\n3rd Qu.\nMax.\n\n\n\n\n0.8\n4.075\n7.25\n7.788\n11.25\n17.4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMin.\n1st Qu.\nMedian\nMean\n3rd Qu.\nMax.\n\n\n\n\n45\n109\n159\n170.8\n249\n337\n\n\n\n\n\nIs there a relationship between urban density and crime?\n\nplot( USArrests$UrbanPop, USArrests$Murder, \n      frame.plot=F, pch=19, cex=2,\n      col=gray( level=0.5, alpha=0.5 ) )\n\nabline( lm( USArrests$Murder ~ USArrests$UrbanPop ), col=\"firebrick\" )\n\n\n\n\n\n\n\n\n\n\n2.5.2 Using the Lahman Data\nLet’s take a look at some of the data available in the Lahman package.\n\ndata( package = \"Lahman\" ) # All datasets in package \"Lahman\":\n\n\n\n\nDATASET NAME\nDESCRIPTION\n\n\n\n\nAllstarFull\nAllstarFull table\n\n\nAppearances\nAppearances table\n\n\nAwardsManagers\nAwardsManagers table\n\n\nAwardsPlayers\nAwardsPlayers table\n\n\nAwardsShareManagers\nAwardsShareManagers table\n\n\nAwardsSharePlayers\nAwardsSharePlayers table\n\n\nBatting\nBatting table\n\n\nBattingPost\nBattingPost table\n\n\nCollegePlaying\nCollegePlaying table\n\n\nFielding\nFielding table\n\n\nFieldingOF\nFieldingOF table\n\n\nFieldingOFsplit\nFieldingOFsplit table\n\n\nFieldingPost\nFieldingPost data\n\n\nHallOfFame\nHall of Fame Voting Data\n\n\nHomeGames\nHomeGames table\n\n\nLahmanData\nLahman Datasets\n\n\nManagers\nManagers table\n\n\nManagersHalf\nManagersHalf table\n\n\nParks\nParks table\n\n\nPeople\nPeople table\n\n\nPitching\nPitching table\n\n\nPitchingPost\nPitchingPost table\n\n\nSalaries\nSalaries table\n\n\nSchools\nSchools table\n\n\nSeriesPost\nSeriesPost table\n\n\nTeams\nTeams table\n\n\nTeamsFranchises\nTeamFranchises table\n\n\nTeamsHalf\nTeamsHalf table\n\n\nbattingLabels\nVariable Labels\n\n\nfieldingLabels\nVariable Labels\n\n\npitchingLabels\nVariable Labels\n\n\n\nWe see that we have lots of datasets to choose from here. I will use the People dataset, which is a list of all of the Major League Baseball players over the past century and their personal information.\n\nlibrary( Lahman )    # loads Lahman package\ndata( People )       # loads the People dataset from Lahman\nhead( People )       # preview dataset\n\nHere are some common functions for exploring datasets:\n\nnames(   People )      # variable names\nnrow(    People )      # number of players (rows) in dataset\nsummary( People )      # descriptive statistics for each variable\n\nWe can use help(People) to get information about the dataset, including a data dictionary.\n\nhelp( People )  # players dataset\n\n\n\nStart helpfile:\n\n\n\n\n\n\nR: People table\n\n\n\n\n\n\n\n\n\n\n\n\nPeople table\n\n\nDescription\n\n\nPeople table - Player names, DOB, and biographical info. This file is to be used to get details about players listed in the Batting, Pitching, and other files where players are identified only by playerID.\n\n\nUsage\n\ndata(People)\n\nFormat\n\n\nA data frame with 20370 observations on the following 26 variables.\n\n\n\nplayerID\n\n\n\nA unique code assigned to each player. The playerID links the data in this file with records on players in the other files.\n\n\n\nbirthYear\n\n\n\nYear player was born\n\n\n\nbirthMonth\n\n\n\nMonth player was born\n\n\n\nbirthDay\n\n\n\nDay player was born\n\n\n\nbirthCountry\n\n\n\nCountry where player was born\n\n\n\nbirthState\n\n\n\nState where player was born\n\n\n\nbirthCity\n\n\n\nCity where player was born\n\n\n\ndeathYear\n\n\n\nYear player died\n\n\n\ndeathMonth\n\n\n\nMonth player died\n\n\n\ndeathDay\n\n\n\nDay player died\n\n\n\ndeathCountry\n\n\n\nCountry where player died\n\n\n\ndeathState\n\n\n\nState where player died\n\n\n\ndeathCity\n\n\n\nCity where player died\n\n\n\nnameFirst\n\n\n\nPlayer’s first name\n\n\n\nnameLast\n\n\n\nPlayer’s last name\n\n\n\nnameGiven\n\n\n\nPlayer’s given name (typically first and middle)\n\n\n\nweight\n\n\n\nPlayer’s weight in pounds\n\n\n\nheight\n\n\n\nPlayer’s height in inches\n\n\n\nbats\n\n\n\na factor: Player’s batting hand (left (L), right (R), or both (B))\n\n\n\nthrows\n\n\n\na factor: Player’s throwing hand (left(L) or right(R))\n\n\n\ndebut\n\n\n\nDate that player made first major league appearance\n\n\n\nfinalGame\n\n\n\nDate that player made first major league appearance (blank if still active)\n\n\n\nretroID\n\n\n\nID used by retrosheet, https://www.retrosheet.org/\n\n\n\nbbrefID\n\n\n\nID used by Baseball Reference website, https://www.baseball-reference.com/\n\n\n\nbirthDate\n\n\n\nPlayer’s birthdate, in as.Date format\n\n\n\ndeathDate\n\n\n\nPlayer’s deathdate, in as.Date format\n\n\n\n\nDetails\n\n\ndebut, finalGame were converted from character strings with as.Date.\n\n\nSource\n\n\nLahman, S. (2023) Lahman’s Baseball Database, 1871-2022, 2022 version, https://www.seanlahman.com/baseball-archive/statistics/\n\n\nExamples\n\ndata(People); data(Batting)\n\n## add player's name to Batting data\nPeople$name &lt;- paste(People$nameFirst, People$nameLast, sep=\" \")\nbatting &lt;- merge(Batting, \n                 People[,c(\"playerID\",\"name\")], \n                 by=\"playerID\", all.x=TRUE)\n\n## batting and throwing\n# right-handed batters are much less ambidexterous in throwing than left-handed batters\n# (should only include batters)\n\nBT &lt;- with(People, table(bats, throws))\nrequire(vcd)\nstructable(BT)\nmosaic(BT, shade=TRUE)\n\n## Who is Shoeless Joe Jackson?\nsubset(People, nameLast==\"Jackson\" & nameFirst==\"Joe\")\nsubset(People, nameLast==\"Jackson\" & nameFirst==\"Shoeless Joe\")\n\njoeID &lt;-c(subset(People, nameLast==\"Jackson\" & nameFirst==\"Shoeless Joe\")[\"playerID\"])\n\nsubset(Batting, playerID==joeID)\nsubset(Fielding, playerID==joeID)\n\n\n\n\n\n\n\nEnd helpfile",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "ch-010-core-r.html",
    "href": "ch-010-core-r.html",
    "title": "3  The R Language",
    "section": "",
    "text": "3.1 Key Concepts\nR is a specialized programming language created by statisticians for data analysis and visualization.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The **R** Language</span>"
    ]
  },
  {
    "objectID": "ch-010-core-r.html#key-concepts",
    "href": "ch-010-core-r.html#key-concepts",
    "title": "3  The R Language",
    "section": "",
    "text": "R Console\nBase R\nPackages\nComprehensive R Archive Network (CRAN)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The **R** Language</span>"
    ]
  },
  {
    "objectID": "ch-010-core-r.html#r-an-open-source-language-for-statistical-computing",
    "href": "ch-010-core-r.html#r-an-open-source-language-for-statistical-computing",
    "title": "3  The R Language",
    "section": "3.2 R: An Open Source Language for Statistical Computing",
    "text": "3.2 R: An Open Source Language for Statistical Computing\nR is a language that was designed for statistical computing, the art of combining computer science tools for problem-solving with models from statistics. The goal is to turn raw data into useful, actionable insights. This field has come to be known as Data Science.\nR is an open source language, which means that applications built in R are not only free, but users are allowed to access and modify the source code.\nAs a result of this design approach, it is extremely easy to develop and adapt code in R. Because of the freedom this provides, R users have expanded the power and functionality of Core R for nearly a quarter century.\nCustom applications and tools that users create for R are called packages (also called libraries when you are loading them). Packages are programs designed to perform a specific type of analysis or visualization.\nThe best part of R is how easy it is to access cutting edge software by installing new packages in a two lines of code:\n\ninstall.packages( \"tidyverse\" )   # install the package\nlibrary( \"tidyverse\" )            # load the package\n\n\nPopular R Packages: [ A RECENT LIST ]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The **R** Language</span>"
    ]
  },
  {
    "objectID": "ch-010-core-r.html#r-as-a-social-network",
    "href": "ch-010-core-r.html#r-as-a-social-network",
    "title": "3  The R Language",
    "section": "3.3 R as a Social Network",
    "text": "3.3 R as a Social Network\nThe R Foundation is a nonprofit that maintains the R language and ensures it remains free and accessible to everyone in the world. Packages are shared through the Comprehensive R Archival Network (The CRAN), a group of servers housed primarily at universities that store R packages so they can be quickly downloaded and deployed.\nThere are over 15,000 packages that users have created for R. They perform a wide variety of tasks such as data preparation, specialized statistical analysis, custom data visualizations, or specific analytical tasks such as text analysis or network analysis.\nThis functionality is a primary reason R has become one of the most popular languages used by academics and data scientists. Provides a very simple way for people to develop cool tools and share them with the world. It became popular because it was built by smart and creative people, who attracted other smart and creative people, who created cool tools, which then attracted more smart and creative people. R Package Downloads",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The **R** Language</span>"
    ]
  },
  {
    "objectID": "ch-010-core-r.html#r-as-an-operating-system",
    "href": "ch-010-core-r.html#r-as-an-operating-system",
    "title": "3  The R Language",
    "section": "3.4 R as an Operating System",
    "text": "3.4 R as an Operating System\nR is a programming language. We can think of a programming languages as instructions that are evaluated and carried out by a computer. R, then, is simply one way to give instructions to computers.\nThis is a limited view of R, though. It is better understood as an operating system for data science software. Just as Windows allows you to turn on your computer, open a web browser, moved files around, and write a paper using MS Word, R allows you to access the CRAN, install and run packages, and manage files while organizing large data projects. Just like Windows would be a very boring piece of software without all of the applications you run while on the computer, R would be a boring language without all of the packages it can run.\n\n\n\n\n\nR is both a programming language and programming environment.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The **R** Language</span>"
    ]
  },
  {
    "objectID": "ch-010-core-r.html#downloading-installing-r",
    "href": "ch-010-core-r.html#downloading-installing-r",
    "title": "3  The R Language",
    "section": "3.5 Downloading & Installing R",
    "text": "3.5 Downloading & Installing R\nYou can download and install R quickly and easily from the Comprehensive R Archive Network, or CRAN. It is a decentralized website that’s hosted and updated by academic institutions all over the world. In other words, R would survive a semi-global catastrophic event. It contains:\n\nThe latest version and past versions of R\nExtensions, also called packages, for R\nPackage and version documentation\nBooks, blogs, conferences, news, etc.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The **R** Language</span>"
    ]
  },
  {
    "objectID": "ch-010-core-r.html#r-console",
    "href": "ch-010-core-r.html#r-console",
    "title": "3  The R Language",
    "section": "3.6 R Console",
    "text": "3.6 R Console\nAfter installing, when you open Base R directly you will see the command-line interface, or a console. This is used to type R code is directly evaluated by the environment, a process known as working interactively.\nWhile this is practice is a quick way to run some simple code, it is difficult to develop complex programs in real-time (it would be like writing a play while it is being acted out). A more typical and organized way to create data recipes is through scripting, which we address below.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The **R** Language</span>"
    ]
  },
  {
    "objectID": "ch-010-core-r.html#extending-rs-functionality-packages",
    "href": "ch-010-core-r.html#extending-rs-functionality-packages",
    "title": "3  The R Language",
    "section": "3.7 Extending R’s Functionality: Packages",
    "text": "3.7 Extending R’s Functionality: Packages\nPackages are collections of new commands, a.k.a. functions, that are developed and shared by the worldwide R userbase. Packages greatly expand the power and functionality of base R, the “vanilla” or unmodified version of R. While CRAN is the most popular package archive, others include Bioconductor and GitHub.\n\nIf R were the Constitution of a nation, packages would be its amendments - they not only provide more freedom for the user, they address new ideas and practices that were unforeseen by R’s founders. More on packages:\n\nFunctions and packages are developed in response to identified needs\nIf your needs are unmet by base R, there’s likely a package for it\nAltogether, there are over 18,000 packages on CRAN, alone\nThere are tens of thousands of unpublished packages\nEntire ecosystems of packages exist, e.g, Tidyverse\n\n\n\n\n\n\n\nPackages give users more freedom and resolve issues unforeseen by R’s founders.\n\n\n\n\n\nYou can install packages in R by calling the install.packages() function, with the package name in quotations:\n\ninstall.packages(\"my_package\")\n\nOnce installed, you can load packages by calling the library() function, without quotations.\nNote: You only need to install a package once. However, you must load each package every time you start R:\n\nlibrary(my_package)\n\nNote: “Packages” and “libraries” are two words for the same thing. They both refer to a set of functions that have been “packaged” or are organized into a “library” to be shared.\n\n\nFun Fact: R is an implementation of an older programming language, S. John Chambers first developed S in 1976 to make statistical analysis a point-and-click, interactive, and user-friendly process. However, Chambers’ underlying philosophy reflects the use of R packages to this day:\n\n“We wanted users to be able to be in in an interactive environment, where they did not consciously think of themselves as programming. Then as their needs became clearer and their sophistication increases, they should be able to slide gradually into programming, when the language and system aspects would become more important.”",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The **R** Language</span>"
    ]
  },
  {
    "objectID": "ch-010-core-r.html#resources",
    "href": "ch-010-core-r.html#resources",
    "title": "3  The R Language",
    "section": "3.8 Resources",
    "text": "3.8 Resources\nThere’s a litany of online and print resources introducing the R language. Here are a few that we find instructive:\n\nI) Full-Length Introductions to R:\n\n“Part I: Foundations, Introduction to R” (Lecy, 2018)\n“Intro to R: Nuts * Bolts” (Crawford, 2018)\n\nII) Publications & Articles:\n\n“What is R? Introduction to R and the R Environment” (CRAN, 2001)\n“R: A Language for Data Analysis and Graphics” (Ihaka & Gentleman, 1996)\n\nIII) Handouts & Cheat Sheets:\n\n“R: Some Helpful Vocabulary” (Lecy, 2017)\n“Base R Cheat Sheet” (RStudio, 2016)\n\nIV) Videos:\n\n“R in 60 Seconds” (Lecy, 2018)\n“John Chambers Interview [On the History of S & R]” (Statistical Learning, 2013)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The **R** Language</span>"
    ]
  },
  {
    "objectID": "ch-020-rstudio.html",
    "href": "ch-020-rstudio.html",
    "title": "4  R Studio",
    "section": "",
    "text": "4.1 Key Concepts\nThis chapter introduces RStudio, a Graphical User Interface (GUI) that makes it easier to use powerful features in R and manage large projects.\nNew vocabulary:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Studio</span>"
    ]
  },
  {
    "objectID": "ch-020-rstudio.html#key-concepts",
    "href": "ch-020-rstudio.html#key-concepts",
    "title": "4  R Studio",
    "section": "",
    "text": "Integrated Development Environment (IDE)\nRStudio Panes:\n\nConsole\nSource\nPlots\nViewer\nEnvironment\nHistory\n\nWorkspace & Global Environment",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Studio</span>"
    ]
  },
  {
    "objectID": "ch-020-rstudio.html#what-is-rstudio",
    "href": "ch-020-rstudio.html#what-is-rstudio",
    "title": "4  R Studio",
    "section": "4.2 What is RStudio?",
    "text": "4.2 What is RStudio?\nRecall that R is both a language and an environment. RStudio is an Integrated Development Environment, or IDE, which is an enhanced, feature-rich programming environment with an easy-to-use graphical user interface, or GUI. While the base R environment is mostly text, RStudio has intuitive icons (hence, “graphical”) for point-and-click, automated operations.\n\nRStudio’s layout is comprised of a menu, console, and a series of panes, or windows in the RStudio interface. Most panes are feature-rich and all panes serve a key purpose, but we’ll only focus on the most critical panes for getting started in RStudio.\n\n\n\n\n\n\nThe RStudio environment with four open panes: The Source, Console, Environment, and Viewer panes.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Studio</span>"
    ]
  },
  {
    "objectID": "ch-020-rstudio.html#downloading-installing-rstudio",
    "href": "ch-020-rstudio.html#downloading-installing-rstudio",
    "title": "4  R Studio",
    "section": "4.3 Downloading & Installing RStudio",
    "text": "4.3 Downloading & Installing RStudio\nRStudio requires R 3.0.1+. If you don’t already have R, download it here.\n\nDOWNLOAD R\n\n\nRStudio is free, open source, and easy to install. Select the Desktop edition on their download page:\n\nDOWNLOAD R STUDIO",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Studio</span>"
    ]
  },
  {
    "objectID": "ch-020-rstudio.html#a-tour-of-rstudio",
    "href": "ch-020-rstudio.html#a-tour-of-rstudio",
    "title": "4  R Studio",
    "section": "4.4 A Tour of RStudio",
    "text": "4.4 A Tour of RStudio\nRStudio is comprised of a main menu and a series of panes, each with their own purpose and features. We focus on the following:\n\nConsole Pane\nSource Pane\nPlots Pane\nViewer Pane\nEnvironment Pane\nHistory Pane",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Studio</span>"
    ]
  },
  {
    "objectID": "ch-020-rstudio.html#the-console-pane",
    "href": "ch-020-rstudio.html#the-console-pane",
    "title": "4  R Studio",
    "section": "4.5 The Console Pane",
    "text": "4.5 The Console Pane\nThe console pane is where R expressions are evaluated. In other words, this is where your code is executed. Recall that working in-console is also known as working interactively and, typically, working in-console is more often for “quick and dirty” tasks, like printing contents of your working directory.\n\nThe Console Pane\n\n\n\n\n\n\nThe console is where code is executed and is typically used for “quick and dirty” tasks.\n\n\n\n\n\nThe console panel lists your current working directory. Notably, even when using point-and-click mechanics to, e.g. import data or change directories, the code for such tasks will still execute in the console. Such click-to-code operations are called macros.\n\nPro Tip: When writing a script, especially when writing out new directory paths, it’s sometimes quicker to use use a click-to-code operation and simply copy and paste the macro code from the console to your script.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Studio</span>"
    ]
  },
  {
    "objectID": "ch-020-rstudio.html#the-source-pane",
    "href": "ch-020-rstudio.html#the-source-pane",
    "title": "4  R Studio",
    "section": "4.6 The Source Pane",
    "text": "4.6 The Source Pane\nThe source pane contains any opened scripts. In starting a new R session, this pane isn’t visible until you’ve opened a new or preexisting script. Multiple scripts may be opened at one time and are navigable using tabs along the top of the source pane.\n\nThe Source Pane\n\n\n\n\n\n\nThe source pane contains opened scripts. It won’t appear until you’ve opened at least one.\n\n\n\n\n\nDepending on the type of script, e.g. plain text scripts (.R), publications (.Rmd), presentations (.Rpres), and apps, each script provides different options in the pane’s toolbar. Common options include:\n\nShow in New Window: Open the script in a separate window; valuable for two or more monitors\nSave Current Document: Update an existing script or title and save a new script\nFind/Replace: Both conventional and advanced options to find and replace code\nRun: Run the line of code where the cursor is, or multiple lines if highlighted\nShow Document Outline: View (and jump to) script’s table of contents",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Studio</span>"
    ]
  },
  {
    "objectID": "ch-020-rstudio.html#plots-viewer-help-panes",
    "href": "ch-020-rstudio.html#plots-viewer-help-panes",
    "title": "4  R Studio",
    "section": "4.7 Plots, Viewer, & Help Panes",
    "text": "4.7 Plots, Viewer, & Help Panes\nThe Plots, Viewer, and Help panes are used to viewing data visualizations, HTML output, and helpful documentation.\n\n\n4.7.1 The Plots Pane\nThe Plots pane allows users to view, export, and publish non-interactive data visualizations. R uses the built-in graphics package by default, but a variety of packages exist such as lattice and ggplot2. While the output displayed is not interactive, it is responsive, i.e it will re-render its scales appropriately if you change the height or width of a plot. Notably, the “Zoom” option opens visualizations in a new window, while the “Export” option allows you to save the image with user-defined dimensions and in a variety of formats.\n\n\n\n4.7.2 The Viewer Pane\nThe Viewer pane renders interactive graphics in HTML with the same options as the Plots pane. Brevity aside, it’s awesome.\n\n\nThe Plots & Viewer Panes\n\n\n\n\n\n\nThe Plots and Viewer panes visualize non-interactive and interactive graphics, respectively.\n\n\n\n\n\n\n\n4.7.3 The Help Pane\nThe Help pane is one of the most valuable panes for any R user. By calling function help() with a dataset, package, or bare function name (i.e. a function name without ()), its documentation, if available, appears here.\n\nNote: Unless you’re using external data or custom functions, there’s almost always documentation. Whether it’s the unit of measurement for a variable in a dataset or the limits you can specify for a function argument, this little nook in RStudio is invaluable to new and advanced users, alike.\n\nPro Tip: Instead of the help() function, you can use the ? function before an object name, e.g. ?install.packages.\n\n\nThe Help Pane\n\n\n\n\n\n\nThe invaluable Help pane displays documentation for packages, functions, and datasets.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Studio</span>"
    ]
  },
  {
    "objectID": "ch-020-rstudio.html#the-environment-and-history-panes",
    "href": "ch-020-rstudio.html#the-environment-and-history-panes",
    "title": "4  R Studio",
    "section": "4.8 The Environment and History Panes",
    "text": "4.8 The Environment and History Panes\nThe Environment and History panes display the objects in your environment and the history of your in-console commands.\n\n\n4.8.1 The Environment Pane\nAgain, R is both a language and an environment. The Environment pane displays objects that are stored within your session’s workspace, or global environment, which must be recreated or reloaded with each new session. Note the following options:\n\nEnvironment: Opens a dropdown menu to select different environments, e.g. package environments\nLoad Workspace: Opens a file explorer to load previously saved workspaces and their objects\nImport Datasets: Opens a dropdown menu to read in datasets that you can store in objects\nClear Objects from Workspace: Removes all objects stored in the global environment\n\n\n\nThe Environment Pane\n\n\n\n\n\n\nThe environment pane displays any objects you’ve imported, loaded, or stored in your global environment.\n\n\n\n\n\n\n\n4.8.2 The History Pane\nThe History pane documents every command you’ve executed in your session. When you select a line, you can paste it directly into the console pane with “To Console” or directly into the source pane with “To Source”.\n\n\nThe History Pane\n\n\n\n\n\n\nThe history pane records every command you’ve run in your session.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Studio</span>"
    ]
  },
  {
    "objectID": "ch-020-rstudio.html#customizing-your-pane-layout",
    "href": "ch-020-rstudio.html#customizing-your-pane-layout",
    "title": "4  R Studio",
    "section": "4.9 Customizing Your Pane Layout",
    "text": "4.9 Customizing Your Pane Layout\nIn RStudio, you can customize both where panes are displayed as well as which panes to show by default.\n\n\n4.9.1 Layouts for Beginners: Taking Great Panes\nPanes cannot be removed entirely from the RStudio interface, you but can shuffle them by order of importance. Click the “Tools” dropdown in themenu, “Global Options…”, and “Pane Layout”. We recommend focusing on those discussed in this chapter.\n\n\nCustomizing Pane Layout\n\n\n\n\n\n\nYou can customize which panes appear, and where, in Global Options’ Pane Layout.\n\n\n\n\n\n\n\n4.9.2 Less Important Panes, or Panes in the Rear\nThere are a couple of panes worth mentioning for new users. However, they are seldom used by advanced users:\n\nFiles: Set working directories and create, copy, rename, and delete folders\nPackages: Install, load, update, unload, and uninstall added (“User Library”) and built-in (“System Library”) packages\n\n\nPro Tip: You probably won’t use these panes often. One of the benefits of scripted languages is that they can be reproduced by other users. As a rule, since much of your work will require loading packages, you should include the library() function with script-dependent packages at the start of every work. The same applies to working directories with the setwd() function.\n\n\n\n4.9.3 Expanding to Fullscreen: Focus on the Pane\nIf you want to expand a pane, or “zoom”, to fullscreen mode, select “View” in the RStudio menu and “Panes”.\n\n\nToggling Fullscreen Panes\n\n\n\n\n\n\nYou can expand any pane to fullscreen mode in the “View” dropdown of the RStudio menu.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Studio</span>"
    ]
  },
  {
    "objectID": "ch-020-rstudio.html#the-rstudio-menu-file-session-help",
    "href": "ch-020-rstudio.html#the-rstudio-menu-file-session-help",
    "title": "4  R Studio",
    "section": "4.10 The RStudio Menu: File, Session, & Help",
    "text": "4.10 The RStudio Menu: File, Session, & Help\nThe RStudio menu allows you to do virtually everythign we’ve seen in each pane and more. The following tours a few key menu sections we’ve not yet seen, including how to open new scripts, handle sessions, and access R-related cheat sheets.\n\n\n4.10.1 The File Submenu: Saving & Loading\nThe File submenu is the start of every scripted data product in RStudio. Just select “New File” and a litany of possible data products, about which we’ll learn more over time, are available to open. Remaining options relate to the saving and loading of scripts, projects, and datasets.\n\n\nThe File Submenu\n\n\n\n\n\n\n“File” handles all new, saving, and loading operations.\n\n\n\n\n\n\n\n4.10.2 The Session Submenu: Sessions, Directories, & Restarting R\nThe Session submenu is a critical part of any R session. While you can always recreate a session by recreating objects, you can save computing time by loading saved session file. This submenu also allows you to set your working directory.\n\nNote: There are times when you just have to restart R - maybe you started an infinite recursion loop or maybe you attempted to read in the data from a month’s worth of Harrier Jet landings to local memory - if so, the “Restart R” option is here for you.\n\n\nThe Session Submenu\n\n\n\n\n\n\nSave and load sessions, restart R, or handle directories in the session submenu.\n\n\n\n\n\n\n\n4.10.3 The Help Submenu: Cheat Sheets\nThe help menu has one main draw (for now): cheat sheets. Selecting a cheat sheet will automatically download a cheat sheet on an R-related topic of your choosing. Typically, cheat sheets summarize RStudio related packages and data products, but there is one for base R. For example, you can find the RStudio IDE cheat sheet here.\n\n\nThe Help Submenu\n\n\n\n\n\n\nGrab cheat sheets on the fly from the Help submenu.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Studio</span>"
    ]
  },
  {
    "objectID": "ch-020-rstudio.html#global-options-aesthetic-functional-preferences",
    "href": "ch-020-rstudio.html#global-options-aesthetic-functional-preferences",
    "title": "4  R Studio",
    "section": "4.11 Global Options: Aesthetic & Functional Preferences",
    "text": "4.11 Global Options: Aesthetic & Functional Preferences\nGlobal options are accessed in the “Tools” submenu and allow users to modify their RStudio interface in myriad ways, both aesthetically and functionally. We recommend new users experiment with these options and visit a few notable modifications.\n\n\nAccessing Global Options\n\n\n\n\n\n\nAccess “Global Options” in the “Tools” submenu.\n\n\n\n\n\n\n4.11.1 Code: Autoformatting & Behavior\nThe “Code” section affects the way R automatically formats your code and how you choose to write and run it. It has sensible defaults, many of which you may not be prepared to appreciate quite yet. For now, consider the following:\n\nIndentating: In the “Editing” tab, consider a “tab width” that works best for you. When indenting, would you prefer two characters (i.e. spaces), or four? The former allows more compact code. The latter allows for more intepretable code.\nGuide Margin: In the “Display” tab, consider applying a “margin column” of 80 or 100 characters (i.e. spaces). This creates a subtle guide in your scripts that helps keep code concise and readable. Even basic code within basic code can create, what RStudio’s Chief Scientist Hadley Wickham refers to as, “Dagwood sandwich” code.\n\n\n\n\n4.11.2 Appearance: Express Yourself Intepretably\nThe Appearance section allow you to customize the size, font, and color of your text as well as the “theme” colors of your RStudio interface. Here, “theme” is both functional and aesthetic. For example, darker themes are more conducive to night owls. For all themes, certain syntax uses different colors to make your code more interpretable - keep this in mind for each theme!\n\n\nNotable Global Options: Code & Appearance\n\n\n\n\n\n\nGlobal options allow you to set preferences that can significantly impact your experience with RStudio.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Studio</span>"
    ]
  },
  {
    "objectID": "ch-020-rstudio.html#further-resources",
    "href": "ch-020-rstudio.html#further-resources",
    "title": "4  R Studio",
    "section": "4.12 Further Resources",
    "text": "4.12 Further Resources\nThe following resources are helpful in learning more about RStudio and coding conventions:\n\nI) Full Introductions to RStudio\n\n“What are R and RStudio?” (Ismay & Kim, 2019)\n“Intro to R: Nuts & Bolts” (Crawford, 2018)\n\nII) About RStudio\n\nRStudio Homepage (RStudio, 2019)\nRStudio About Page (RStudio, 2019)\nRStudio Product Page (RStudio, 2019)\n\nIII) Conventions\n\n“The State of Naming Conventions in R” (Baath, 2012)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Studio</span>"
    ]
  },
  {
    "objectID": "ch-033-calculator.html",
    "href": "ch-033-calculator.html",
    "title": "5  R: An Overdesigned Calculator",
    "section": "",
    "text": "5.1 Introduction\nChief among R’s many capabilities are basic mathematical operations, making it a severely overdesigned calculator. The only thing a TI-84 has on R is that you can’t play Super Mario Brothers with the latter - yet (package developers… if your listening…).\nSo what?\nArithmetic operations in R are key to transforming your data, whether calculating property code violations per capita or converting U.S. dollars to Indian rupees. In short, you use them to make new variables from existing ones. When we combine arithmetic with objects that store one or more values, we’re dangerously close to practicing algebra.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>R: An Overdesigned Calculator</span>"
    ]
  },
  {
    "objectID": "ch-033-calculator.html#key-concepts",
    "href": "ch-033-calculator.html#key-concepts",
    "title": "5  R: An Overdesigned Calculator",
    "section": "5.2 Key Concepts",
    "text": "5.2 Key Concepts\nIn this chapter, we’ll learn and practice basic arithmetic functions in R, assign calculations and their resulting values to objects, and use those objects in algebraic operations. Key concepts include:\n\nArithmetic Operators\nOperator Precedence\nAssignment",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>R: An Overdesigned Calculator</span>"
    ]
  },
  {
    "objectID": "ch-033-calculator.html#key-takeaways",
    "href": "ch-033-calculator.html#key-takeaways",
    "title": "5  R: An Overdesigned Calculator",
    "section": "5.3 Key Takeaways",
    "text": "5.3 Key Takeaways\nEverything you need to know in a few bullet points:\n\nArithmetic operators include: +, -, *, /, ^, ( )\nCalculations follow the order of operations\nCreate objects with assignment:\n\nx stores the value 3 after calling x &lt;- 3\n\nNumeric bjects act like variables in algebra:\n\nx + 2 equals 5",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>R: An Overdesigned Calculator</span>"
    ]
  },
  {
    "objectID": "ch-033-calculator.html#arithmetic-operators",
    "href": "ch-033-calculator.html#arithmetic-operators",
    "title": "5  R: An Overdesigned Calculator",
    "section": "5.4 Arithmetic Operators",
    "text": "5.4 Arithmetic Operators\n\n“What sort of free will is left when we come to tabulation and arithmetic? When it will all be a case of twice two makes four?\nYou don’t need free will to determine that twice two is four.” (Dostoyevsky)\n\n\nYou remember arithmetic, right? That peculiar field of mathematics in which people who admittedly “don’t math”, for whatever reason, actually use every day?\nArithmetic operators in R work just like they did in primary school, including addition, subtraction, multiplication, division, and exponentiation:\n\n+ or addition, e.g. 2 + 2\n- or subtraction, e.g. 2 - 2\n* or multiplication, e.g. 2 * 2\n/ or division, e.g. 2 / 2\n^ or exponentiation, e.g. 2 ^ 2\n( ) for order of operations, e.g. ((2 + 2) * 2)\n\n\nThe following example has a number of operations. Run the code to see what happens:\n\n7 + 3       # Addition\n\n8 - 12      # Subtraction\n\n9 * 9       # Multiplication\n\n10 / 3      # Division\n\n10 ^ 3      # Exponentiation\n\n\nEureka! Forget your mobile phone’s calculator app. Install R on it!\n(Plus, you can browse Reddit during class, but it looks like you’re working).\n\n\n5.4.1 Your Turn\n\nInstructions: Perform the following arithmetic operation in R.\nTip: Numeric values in R don’t use commas.\n\n\n# Raise 5 to the fifth power\n\n# Subtract 30 from 100\n\n# Divide 1,000 by 300\n\n\n\n\n\n\n\nArithmetic operators are the most atomic functions in R programming.\n\n\n\n\n\nSource: XKCD",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>R: An Overdesigned Calculator</span>"
    ]
  },
  {
    "objectID": "ch-033-calculator.html#order-of-operations",
    "href": "ch-033-calculator.html#order-of-operations",
    "title": "5  R: An Overdesigned Calculator",
    "section": "5.5 Order of Operations",
    "text": "5.5 Order of Operations\nHere’s another blast from the past: the operator precedence. At least, that’s what it’s called in programming languages. You probably remember it as the order of operations.\nIf you don’t recall the specific rules, perhaps you remember the mnemonic devices: PEMDAS or Please Excuse My Dear Aunt Sally. We are not sure know what Aunt Sally did, but we are pretty sure she deserves whatever punshinment she received.\nPEMDAS reminds us the order arithmetic operations are evaluated, a.k.a. the order of operations:\n\nParenthesis, or expressions inside ( )\nExponents, or raising one value to the power of another with ^\nMultiplication, or multiplying values with *\nDivision, or dividing values with /\nAddition, or adding values with +\nSubtraction, or subtracting values with -\n\nArithmetic operations in R are also evaluated in the same order. Can you guess the results before evaluating the expressions? Press “Run” to execute the code and see the results:\n\n# easy one\n5 + 10 / 5    \n\n# harder\n5 - 10 + 5 \n5 + 10 - 5  \n\n# similarly\n5 * 10 / 5   \n5 / 10 * 5 \n\n# easier\n3 * 2 ^ 2\n\n# hmmm\n2 * (2 + 3) * 3\n\n# huh?\n( 2 + 3 ) / 5 * 2\n( 2 + 3 ) * 5 / 2\n( 2 + 3 ) / 2 * 5\n\n\n\nNote that R is indifferent to order of operations for addition vs subtraction, and multiplication vs division.\nFor cases where both occur the code is just executed from left to right.\n\n\n5.5.1 Your Turn\n\nInstructions:\nThe formula to calculate a monthly mortgage payment based upon the loan amount, annual interest rate, and loan term (in months) is calculated as follows:\n\\[\nPAYMENT = \\frac{principal \\cdot \\frac{interest \\ rate}{12}}{1-(1+\\frac{interest \\ rate}{12})^{- \\ months}}\n\\]\nLet’s say we have a $100,000 loan at a 5% interest rate amortized over 360 months (30 years). The payments would be as follows:\n\\[\nPAYMENT = \\frac{ 100k \\cdot \\frac{0.05}{12}}{1-(1+\\frac{0.05}{12})^{- \\ 360}}\n\\]\nCan you type the formula into R correctly? The payment should come to $536.82 a month.\n\n\n# Type your formula here",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>R: An Overdesigned Calculator</span>"
    ]
  },
  {
    "objectID": "ch-033-calculator.html#valid-object-names",
    "href": "ch-033-calculator.html#valid-object-names",
    "title": "5  R: An Overdesigned Calculator",
    "section": "6.1 Valid Object Names",
    "text": "6.1 Valid Object Names\nWhen creating new objects there are both rules and conventions for naming them.\nThe rules are fairly simple:\n\nR is case sensitive, so b and B are different objects.\nObject names can include letters, periods and underscores.\nObject names can include numbers, but cannot begin with a number.\n\nx.01 &lt;- 99  # good\nx_01 &lt;- 99  # this works\n01.x &lt;- 99  # produces an error\n\n.x &lt;- 99    # this works\n.1x &lt;- 99   # this doesn't\n_x &lt;- 99    # oddly this doesn't\nIn general it is good to name objects so they are easy to remember. You can combine words using one of three conventions:\n\nCamel Caps\nUnderscores\nPeriods\n\nmyData  &lt;- 99  # camel caps\nmy_data &lt;- 99  # underscore\nmy.data &lt;- 99  # dot case\nSome people have strong views on these. You should find something that works for you and be consistent.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>R: An Overdesigned Calculator</span>"
    ]
  },
  {
    "objectID": "ch-033-calculator.html#further-resources",
    "href": "ch-033-calculator.html#further-resources",
    "title": "5  R: An Overdesigned Calculator",
    "section": "6.2 Further Resources",
    "text": "6.2 Further Resources\nThe following resources are helpful in learning more about arithmetic operators in R:\n\n“Arithmetic Operators” (CRAN)\n“Intro to R: Operators” (Crawford,\n\n\n\n“Quick-R: Operators” (Kabacoff, 2017)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>R: An Overdesigned Calculator</span>"
    ]
  },
  {
    "objectID": "ch-033-calculator.html#works-cited",
    "href": "ch-033-calculator.html#works-cited",
    "title": "5  R: An Overdesigned Calculator",
    "section": "6.3 Works Cited",
    "text": "6.3 Works Cited\nThe Hangover (2009) The Hunger Games (2010)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>R: An Overdesigned Calculator</span>"
    ]
  }
]